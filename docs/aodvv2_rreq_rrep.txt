This document contains every part of AODVv2 that I want to implement for my
bachelor's thesis (so far). I may extend it as I go along.

== Notes ==


== TBD ==

Routing Messages RREQ and RREP (RteMsgs)

   When an AODVv2 router needs to forward a data packet from a node
   (OrigNode) in its set of router clients, and it does not have a
   forwarding route toward the packet's IP destination address
   (TargNode), the AODVv2 router (RREQ_Gen) generates a RREQ (as
   described in Section 7.3) to discover a route toward TargNode.
   Subsequently RREQ_Gen awaits reception of an RREP message (see
   Section 7.4) or other route table update (see Section 6.2) to
   establish a route toward TargNode.

I will/may go over the AODVVv2 draft iteratively and add more functions after
successful implementation if everything in the document.
(For example Route Mainenance, which is missing entirely, may be added partly later on.)

================================================================================

5.  Data Structures

5.1.  Route Table Entry

   The route table entry is a conceptual data structure.
   Implementations may use any internal representation so long as it
   provides access to the information specified below.

   Conceptually, a route table entry has the following fields:

   Route.Address
      The (host or network) destination address of the node(s)
      associated with the routing table entry
   Route.PrefixLength
      The length of the netmask/prefix.  If the value of the
      Route.PrefixLength is less than the length of addresses in the
      address family used by the AODVv2 routers, the associated address
      is a routing prefix, rather than a host address.  A PrefixLength
      is stored for every route in the route table.
   Route.SeqNum
      The Sequence Number associated with a route table entry
   Route.NextHopAddress
      An IP address of the adjacent AODVv2 router on the path toward the
      Route.Address
   Route.NextHopInterface
      The interface used to send packets toward the Route.Address
   Route.LastUsed
      The time that this route was last used
   Route.ExpirationTime
      The time at which this route must expire
   Route.Broken
      A flag indicating whether this Route is broken.  This flag is set
      to true if the next-hop becomes unreachable or in response to
      processing to a RERR (see Section 8.4)
   Route.MetricType
      The type of the metric for the route towards Route.Address
   Route.Metric
      The cost of the route towards Route.Address

   A route table entry (i.e., a route) may be in one of the following
   states:

   Active
      An Active route is in current use for forwarding packets
   Idle
      An Idle route can be used for forwarding packets, even though it
      is not in current use
   Expired
      After a route has been idle for too long, it expires, and may no
      longer be used for forwarding packets
   Broken
      A route marked as Broken cannot be used for forwarding packets but
      still has valid destination sequence number information.
   Timed
      The expiration of a Timed route is controlled by the
      Route.ExpirationTime time of the route table entry (instead of
      MAX_IDLETIME).  Until that time, a Timed route can be used for
      forwarding packets.  Afterwards, the route must be Expired (or
      expunged).

   The route's state determines the operations that can be performed on
   the route table entry.  During use, an Active route is maintained
   continuously by AODVv2 and is considered to remain active as long as
   it is used at least once during every ACTIVE_INTERVAL.  When a route
   is no longer Active, it becomes an Idle route.  After an idle route
   remains Idle for MAX_IDLETIME, it becomes an Expired route.  An
   Expired route is not used for forwarding, but the sequence number
   information can be maintained until the destination sequence number
   has had no updates for MAX_SEQNUM_LIFETIME; after that time, old
   sequence number information is considered no longer valuable and the
   Expired route MUST BE expunged.

   When the link to a route's next hop is broken, the route is marked as
   being Broken, and the route may no longer be used.

5.3.  Router Clients and Client Networks

   An AODVv2 router may offer routing services to other nodes that are
   not AODVv2 routers.  AODVv2 defines the Sequence Number to be the
   same for the AODVv2 router and each of its clients.

   For this purpose, CLIENT_ADDRESSES must be configured on each AODVv2
   router with the following information:

   Client IP address
      The IP address of the node that requires routing service from the
      AODVv2 router.
   Client Prefix Length
      The length of the routing prefix associated with the client IP
      address.

   The list of Routing Clients for an AODVv2 router is never empty, 
   since an AODVv2 router is always its own client as well.

5.5.  Sequence Numbers

   Each AODVv2 router in the network MUST maintain its own sequence
   number.  An AODVv2 router increments its SeqNum as follows.  Most of
   the time, SeqNum is incremented by simply adding one (1).  But to
   increment SeqNum when it has the value of the largest possible number
   representable as a 16-bit unsigned integer (i.e., 65,535), it MUST be
   set to one (1).  In other words, the sequence number after 65,535 is
   1.

  6.1.  Evaluating Incoming Routing Information

   Whenever an AODVv2 router (HandlingRtr)
   handles an incoming RteMsg (i.e., RREQ or RREP), for every relevant
   address (RteMsg.Addr) in the RteMsg, HandlingRtr searches its route
   table to see if there is a route table entry with the same MetricType
   of the RteMsg, matching RteMsg.Addr.  If not, HandlingRtr creates a
   route table entry for RteMsg.Addr as described in Section 6.2.
   Otherwise, HandlingRtr compares the incoming routing information in
   RteMsg against the already stored routing information in the route
   table entry (Route) for RteMsg.Addr, as described below.

   1.  Stale::  RteMsg.SeqNum < Route.SeqNum :
      If RteMsg.SeqNum < Route.SeqNum the incoming information is stale.
      Using stale routing information is not allowed, since that might
      result in routing loops.  HandlingRtr MUST NOT update the route
      table entry using the routing information for RteMsg.Addr. [DONE]
   2.  Unsafe against loops::  (TRUE != LoopFree (RteMsg, Route)) :
      If RteMsg is not Stale (as in (1) above), RteMsg.Cost is next
      considered to insure loop freedom.  If (TRUE != LoopFree (RteMsg,
      Route)) (see Section 5.6), then the incoming RteMsg information is
      not guaranteed to prevent routing loops, and it MUST NOT be used
      to update any route table entry.
   3.  More costly::
      (RteMsg.Cost >= Route.Metric) && (Route.Broken==FALSE)
      When RteMsg.SeqNum is the same as in a valid route table entry,
      and LoopFree (RteMsg, Route) assures loop freedom, incoming
      information still does not offer any improvement over the existing
      route table information if RteMsg.Cost >= Route.Metric.  Using
      such incoming routing information to update a route table entry is
      not recommended. [DONE]
   4.  Offers improvement::
      Incoming routing information that does not match any of the above
      criteria is better than existing routing table information and
      SHOULD be used to improve the route table.  The following pseudo-
      code illustrates whether incoming routing information should be
      used to update an existing route table entry as described in
      Section 6.2. [DONE]

5.7.  RREQ Table: Received RREQ Messages

   Two incoming RREQ messages are considered to be "comparable" if they
   were generated by the same AODVv2 router in order to discover a route
   for the same destination with the same metric type. 
   A router, after receiving a RREQ message, MUST check against previous RREQs 
   to assure that its response message would contain information that is not 
   redundant.

   To avoid transmission of redundant RREQ messages, while still
   enabling the proper handling of earlier RREQ messages that may have
   somehow been delayed in the network, it is needed for each AODVv2
   router to keep a list of the certain information about RREQ messages
   which it has recently received.

   This list is called the RREQ Table.  Two AODVv2 RREQ messages are comparable if:

   o  they have the same metric type
   o  they have the same OrigNode and TargNode addresses

   Each entry in the RREQ Table has the following fields:

   o  Metric Type
   o  OrigNode address
   o  TargNode address
   o  Sequence Number
   o  Metric
   o  Timestamp

   The RREQ Table is maintained so that no two entries in the RREQ Table
   are comparable -- that is, all RREQs represented in the RREQ Table
   either have different OrigNode addresses, different TargNode
   addresses, or different metric types.  If two RREQs have the same
   metric type and OrigNode and Targnode addresses, the information from
   the one with the older Sequence Number is not needed in the table; in
   case they have the same Sequence Number, the one with the greater
   Metric value is not needed; in case they have the same Metric as
   well, it does not matter which table entry is maintained.  Whenever a
   RREQ Table entry is updated, its Timestamp field should also be
   updated to reflect the Current_Time.


6.2.  Applying Route Updates To Route Table Entries
   To apply the route update, the route table entry is populated with
   the following information:

   o  Route.Address := RteMsg.Addr [DONE]
   o  If RteMsg.PrefixLength exists, then Route.PrefixLength :=
      RteMsg.PrefixLength.  Otherwise, Route.PrefixLength := maximum
      length for address family (either 32 or 128). [DONE]
   o  Route.SeqNum := RteMsg.SeqNum [DONE]
   o  Route.NextHopAddress := IP.SourceAddress (i.e., an address of the
      node from which the RteMsg was received) [DONE]
   o  Route.Broken flag := FALSE [DONE]
   o  Route.Metric := (RteMsg.Metric + Cost(L)), where L is the incoming
      link. [DONE]
   o  Route.ExpirationTime := Current_Time + (ACTIVE_INTERVAL + MAX_IDLETIME). [DONE]

7.2.  RteMsg Structure
   
   RteMsgs have the following general format:

   +---------------------------------------------------------------+
   |       RFC 5444 Message Header (optionally, with MsgTLVs)      |
   +---------------------------------------------------------------+
   |                AddrBlk := {OrigNode,TargNode}                 |
   +---------------------------------------------------------------+
   |              OrigSeqNumTLV AND/OR TargSeqNumTLV               |
   +---------------------------------------------------------------+
   |                 Added Node Address SeqNumTLV                  |
   +---------------------------------------------------------------+

         Figure 1: RREQ and RREP (RteMsg) message structure

   Required Message Header Fields
      The RteMsg MUST contain the following:
      *  <msg-hop-limit>
   
   AddrBlk
      This Address Block contains the IP addresses for RREQ Originating
      and Target Node (OrigNode and TargNode).  For both RREP and RREQ,
      OrigNode and TargNode are as identified in the context of the RREQ
      message originator.
   OrigSeqNum AND/OR TargSeqNum AddrTLV
      At least one of OrigSeqNum or TargSeqNum Address Block TLV is
      REQUIRED and carries the destination sequence numbers associated
      with either OrigNode or TargNode.  Both may appear when SeqNum
      information is available for both OrigNode and TargNode.


   RteMsgs carry information about OrigNode and TargNode.  Since their
   addresses may appear in arbitrary order within the RFC 5444 AddrBlk,
   the OrigSeqNum and/or TargSeqNum TLVs must be used to distinguish the
   nature of the node addresses present in the AddrBlk.  In each RteMsg,
   at least one of OrigSeqNumTLV or TargSeqNumTLV MUST appear.  Both
   TLVs MAY appear in the same RteMsg, but each one MUST NOT appear more
   than once, because there is only one OrigNode and only one TargNode
   address in the AddrBlk.

7.3.  RREQ Generation

   The AODVv2 router generating the RREQ (RREQ_Gen) on behalf of its
   client OrigNode follows the steps in this section. OrigNode MUST be
   a unicast address.

   1. RREQ_Gen MUST increment its SeqNum by one (1) according to the
      rules specified in Section 5.5.  This assures that each node
      receiving the RREQ will update its route table using the
      information in the RREQ.

   An example RREQ message format is illustrated in Appendix A.1.

7.4.  RREP Generation

   Before transmitting a RREP, the routing information of the RREQ is
   processed as specified in Section 6.2; after such processing,
   RREP_Gen has an updated route to OrigNode as well as TargNode.  The
   basic format of an RREP conforms to the structure for RteMsgs as
   shown in Figure 1.

   RREP_Gen generates the RREP as follows:

   2.   RREP_Gen MUST increment its SeqNum by one (1) according to the
        rules specified in Section 5.5.
   3.   RREP.AddrBlk := {OrigNode.Addr, TargNode.Addr}

        Let OrigNodeNdx and TargNodeNdx denote the indexes of OrigNode
        and TargNode respectively in the RREQ.AddrBlk list.
   4.   RREP.OrigSeqNumTLV[OrigNodeNdx]  := Route[OrigNode].Seqnum
   5.   RREP.TargSeqNumTLV[TargNodeNdx]  := RREP_Gen's SeqNum
   11.  IP.DestinationAddr := Route[OrigNode].NextHop

   An example message format for RREP is illustrated in Appendix A.2.

7.5.  Handling a Received RteMsg

   Before an AODVv2 router can make use of a received RteMsg (i.e., RREQ
   or RREP), the router first must verify that the RteMsg is permissible
   according to the following steps. OrigNodeNdx and TargNodeNdx are
   set according to the rules in Section 7.2.  For RREQ, RteMsg.Metric
   is MetricTLV[OrigNodeNdx].  For RREP, RteMsg.Metric is
   MetricTLV[TargNodeNdx]. In this section (unless qualified by
   additional description such as "upstream" or "neighboring") all
   occurrences of the term "router" refer to the AODVv2 router handling
   the received RteMsg. 

   2. The router examines the RteMsg to ascertain that it contains the
      required information: <msg-hop-limit>, TargNode.Addr,
      OrigNode.Addr, RteMsg.Metric, and either RteMsg.OrigSeqNum or
      RteMsg.TargSeqNum.  If the required information does not exist,
      the message is disregarded. [DONE]
   
   An AODVv2 router handles a permissible RteMsg according to the
   following steps.
   
   1.  The router MUST process the routing information for OrigNode and
       TargNode contained in the RteMsg as specified in Section 6.1. [DONE]

   3. If RteMsg.<msg-hop-limit> is zero (0), no further action is
      taken, and the RteMsg is not retransmitted.  Otherwise, the
      router MUST decrement RteMsg.<msg-hop-limit>. [DONE]

   4.  The router checks the Metric Type MsgTLV (if present) to assure
       that the Metric Type associated with the Metric AddrTLV
       information in the RREQ or RREP is known, and that Cost(L) can be
       computed, where 'L' is the incoming link.  If not, the message is
       disregarded. [DONE]

   5.  If (MAX_METRIC[RteMsg.MetricType] - Cost(L)) <= RteMsg.Metric,
       the RteMsg is disregarded, where Cost(L) denotes the cost of
       traversing the incoming link (i.e., as measured by the network
       interface receiving the incoming RteMsg). [DONE]

7.5.1.  Additional Handling for Incoming RREQ

   o  By sending a RREQ, a router advertises that it will route for
      addresses contained in the RteMsg based on the information
      enclosed.  The router MAY choose not to send the RREQ.
   o  The incoming RREQ MUST be checked against previously received
      information from the RREQ Table Section 7.6.  If the information
      in the incoming RteMsg is redundant, then then no further action
      is taken.
   o  If TargNode is a client of the router receiving the RREQ, then the
      router generates a RREP message as specified in Section 7.4, and
      subsequently processing for the RREQ is complete.  Otherwise,
      processing continues as follows.
   o  RREQ.MetricType := Route[OrigNode].MetricType
   o  RREQ.MetricTLV[OrigNodeNdx] := Route[OrigNode].Metric
   o  The RREQ (with updated fields as specified above>) SHOULD be sent
      to the IP multicast address LL-MANET-Routers [RFC5498].  If the
      RREQ is unicast, the IP.DestinationAddress is set to
      Route[RREQ.TargNode].NextHopAddress.

7.5.2.  Additional Handling for Incoming RREP
   
   o  If HandlingRtr is RREQ_Gen then the RREP satisfies RREQ_Gen's
      earlier RREQ, and RREP processing is completed.  Any packets
      buffered for OrigNode should be transmitted.

7.6.  Suppressing Redundant RREQ messages

   Since RREQ messages are multicast, there are common circumstances in
   which an AODVv2 router might transmit a redundant response (RREQ or
   RREP), duplicating the information transmitted in response to some
   other recent RREQ (see Section 5.7).  Before responding, an AODVv2
   router MUST suppress such redundant RREQ messages.  This is done by
   checking the list of recently received RREQs to determine whether the
   incoming RREQ contains new information, as follows:

   o  The AODVv2 router searches the RREQ Table for recent entries with
      the same OrigNode, TargNode, and Metric Type.  If there is no such
      entry, the incoming RREQ message is not suppressed.  A new entry
      for the incoming RREQ is created in the RREQ Table.
   o  If there is such an entry, and the incoming RREQ has a newer
      sequence number, the incoming RREQ is not suppressed, and the
      existing table entry MUST be updated to reflect the new Sequence
      Number and Metric.
   o  Similarly, if the Sequence Numbers are the same, and the incoming
      RREQ offers a better Metric, the incoming RREQ is not suppressed,
      and the RREQ Table entry MUST be updated to reflect the new
      Metric.
   o  Otherwise, the incoming RREQ is suppressed.

========== APPENDIX ============================================================

A.1.  RREQ Message Format 

   Figure 4 illustrates a packet format for an example RREQ message.

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | PV=0 |  PF=0  | msg-type=RREQ | MF=4  | MAL=3 |  msg-size=28  |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  msg-size=28  | msg-hop-limit |      msg.tlvs-length=0        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   num-addr=2  |1|0|0|0|0| Rsv | head-length=3 |Head(Orig&Targ)|
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | Head (bytes for Orig & Target)|   Orig.Tail   |  Target.Tail  |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |      addr.tlvs-length=11      |  type=SeqNum  |0|1|0|1|0|0|Rsv|
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | Index-start=0 | tlv-length=2  |     Orig.Node Sequence #      |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  type=Metric  |0|1|0|1|0|0|Rsv| Index-start=0 | tlv-length=1  |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | OrigNodeHopCt |
     +-+-+-+-+-+-+-+-+

       Figure 4: Example IPv4 RREQ, with SeqNum and Metric AddrTLVs

   The fields in Figure 4 are to be interpreted as follows:

   o  PV=0 (Packet Header Version = 0)
   o  PF=0 (Packet Flags = 0)
   o  msg-type=RREQ (first [and only] message is of type RREQ)
   o  MF=4 (Message Flags = 4 [only msg-hop-limit field is present])
   o  MAL=3 (Message Address Length indicator [3 for IPv4, 15 for IPv6])
   o  msg-size=28 (octets -- counting MsgHdr, MsgTLVs, and AddrBlks)
   o  msg-hop-limit (initially MAX_HOPCOUNT by default)
   o  msg.tlvs-length=0 (no Message TLVs)
   o  num-addr=2 (OrigNode and TargNode addresses in RteMsg AddrBlock)
   o  AddrBlk flags:

      *  bit 0 (ahashead): 1
      *  bit 1 (ahasfulltail): 0
      *  bit 2 (ahaszerotail): 0
      *  bit 3 (ahassingleprelen): 0
      *  bit 4 (ahasmultiprelen): 0
      *  bits 5-7: RESERVED
   o  head-length=3 (length of head part of each address is 3 octets)
   o  Head (3 initial bytes for both Originating & Target addresses)
   o  Orig.Tail (4th byte of Originating Node IP address)
   o  Target.Tail (4th byte of Target Node IP address)
   o  addr.tlvs-length=11 (length in bytes for SeqNum and Metric TLVs
   o  type=SeqNum (AddrTLV type of first AddrBlk TLV, values 2 octets)
   o  AddrTLV flags for SeqNumTLV:

      *  bit 0 (thastypeext): 0
      *  bit 1 (thassingleindex): 1
      *  bit 2 (thasmultiindex): 0
      *  bit 3 (thasvalue): 1
      *  bit 4 (thasextlen): 0
      *  bit 5 (tismultivalue): 0
      *  bits 6-7: RESERVED
   o  Index-start=0 (SeqNum TLV values start at index 0)
   o  tlv-length=2 (so there is only one TLV value, [1 = 2/2])
   o  Orig.Node Sequence # (first [and only] TLV value for SeqNum TLVs
   o  type=Metric (AddrTLV type of second AddrBlk TLV, values 1 octet)
   o  AddrTLV flags for MetricTLV:

      *  bit 0 (thastypeext): 0
      *  bit 1 (thassingleindex): 1
      *  bit 2 (thasmultiindex): 0
      *  bit 3 (thasvalue): 1
      *  bit 4 (thasextlen): 0
      *  bit 5 (tismultivalue): 0
      *  bits 6-7: RESERVED
   o  Index-start=0 (Metric TLV values start at index 0)
   o  tlv-length=1 (so there is only one TLV value, [1 = 1/1])
   o  OrigNodeHopCt (first [and only] TLV value for Metric TLVs)



A.2.  RREP Message Format

   Figure 5 illustrates a packet format for an example RREP message.

        0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       | PV=0 |  PF=0  | msg-type=RREP | MF=4  | MAL=3 |  msg-size=30  |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |  msg-size=30  | msg-hop-limit |      msg.tlvs-length=0        |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |   num-addr=2  |1|0|0|0|0| Rsv | head-length=3 |Head(Orig&Targ)|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       | Head (bytes for Orig & Target)|   Orig.Tail   |  Target.Tail  |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |      addr.tlvs-length=13      |  type=SeqNum  |0|1|0|1|0|0|Rsv|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       | Index-start=0 | tlv-length=2  |     Orig.Node Sequence #      |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |    Target.Node Sequence #     |  type=Metric  |0|1|0|1|0|0|Rsv|
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       | Index-start=1 | tlv-length=1  | TargNodeHopCt |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

         Figure 5: Example IPv4 RREP, with 2 SeqNums and 1 Metric

   The fields in Figure 5 are to be interpreted as follows:
   o  PV=0 (Packet Header Version = 0)
   o  PF=0 (Packet Flags = 0)
   o  msg-type=RREP (first [and only] message is of type RREP)
   o  MF=4 (Message Flags = 4 [only msg-hop-limit field is present])
   o  MAL=3 (Message Address Length indicator [3 for IPv4, 15 for IPv6])
   o  msg-size=28 (octets -- counting MsgHdr, MsgTLVs, and AddrBlks)
   o  msg-hop-limit (initially MAX_HOPCOUNT by default)
   o  msg.tlvs-length=0 (no Message TLVs)
   o  num-addr=2 (OrigNode and TargNode addresses in RteMsg AddrBlock)
   o  AddrBlk flags:
      *  bit 0 (ahashead): 1
      *  bit 1 (ahasfulltail): 0
      *  bit 2 (ahaszerotail): 0
      *  bit 3 (ahassingleprelen): 0
      *  bit 4 (ahasmultiprelen): 0
      *  bits 5-7: RESERVED
   o  head-length=3 (length of head part of each address is 3 octets)
   o  Head (3 initial bytes for both Originating & Target addresses)
   o  Orig.Tail (4th byte of Originating Node IP address)
   o  Target.Tail (4th byte of Target Node IP address)
   o  addr.tlvs-length=13 (length in bytes for SeqNum and Metric TLVs
   o  type=SeqNum (AddrTLV type of first AddrBlk TLV, values 2 octets)
   o  AddrTLV flags for SeqNumTLV:
      *  bit 0 (thastypeext): 0
      *  bit 1 (thassingleindex): 1
      *  bit 2 (thasmultiindex): 0
      *  bit 3 (thasvalue): 1
      *  bit 4 (thasextlen): 0
      *  bit 5 (tismultivalue): 0
      *  bits 6-7: RESERVED
   o  Index-start=0 (SeqNum TLV values start at index 0)
   o  tlv-length=4 (so there is are two TLV values, [2 = 4/2])
   o  Orig.Node Sequence # (first of two TLV values for SeqNum TLVs
   o  Targ.Node Sequence # (second of two TLV values for SeqNum TLVs
   o  type=Metric (AddrTLV type of second AddrBlk TLV, values 1 octet)
   o  AddrTLV flags for MetricTLV [01010000, same as for SeqNumTLV]
   o  Index-start=1 (Metric TLV values start at index 1)
   o  tlv-length=1 (so there is only one TLV value, [1 = 1/1])
   o  TargNodeHopCt (first [and only] TLV value for Metric TLVs)







