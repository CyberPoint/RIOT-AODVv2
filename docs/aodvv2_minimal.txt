This document contains every part of AODVv2 that I want to implement for my
bachelor's thesis (so far). I may extend it as I go along.

(For example Route Mainenance, which is missing entirely, but may be added partly later on.)

================================================================================

5.  Data Structures

5.1.  Route Table Entry [DONE]

   The route table entry is a conceptual data structure.
   Implementations may use any internal representation so long as it
   provides access to the information specified below.

   Conceptually, a route table entry has the following fields:

   Route.Address
      The (host or network) destination address of the node(s)
      associated with the routing table entry
   Route.PrefixLength
      The length of the netmask/prefix.  If the value of the
      Route.PrefixLength is less than the length of addresses in the
      address family used by the AODVv2 routers, the associated address
      is a routing prefix, rather than a host address.  A PrefixLength
      is stored for every route in the route table.
   Route.SeqNum
      The Sequence Number associated with a route table entry
   Route.NextHopAddress
      An IP address of the adjacent AODVv2 router on the path toward the
      Route.Address
   Route.NextHopInterface
      The interface used to send packets toward the Route.Address
   Route.LastUsed
      The time that this route was last used
   Route.ExpirationTime
      The time at which this route must expire
   Route.Broken
      A flag indicating whether this Route is broken.  This flag is set
      to true if the next-hop becomes unreachable or in response to
      processing to a RERR (see Section 8.4)
   Route.MetricType
      The type of the metric for the route towards Route.Address
   Route.Metric
      The cost of the route towards Route.Address

   A route table entry (i.e., a route) may be in one of the following
   states:

   Active
      An Active route is in current use for forwarding packets
   Idle
      An Idle route can be used for forwarding packets, even though it
      is not in current use
   Expired
      After a route has been idle for too long, it expires, and may no
      longer be used for forwarding packets
   Broken
      A route marked as Broken cannot be used for forwarding packets but
      still has valid destination sequence number information.
   Timed
      The expiration of a Timed route is controlled by the
      Route.ExpirationTime time of the route table entry (instead of
      MAX_IDLETIME).  Until that time, a Timed route can be used for
      forwarding packets.  Afterwards, the route must be Expired (or
      expunged).

   The route's state determines the operations that can be performed on
   the route table entry.  During use, an Active route is maintained
   continuously by AODVv2 and is considered to remain active as long as
   it is used at least once during every ACTIVE_INTERVAL.  When a route
   is no longer Active, it becomes an Idle route.  After an idle route
   remains Idle for MAX_IDLETIME, it becomes an Expired route.  An
   Expired route is not used for forwarding, but the sequence number
   information can be maintained until the destination sequence number
   has had no updates for MAX_SEQNUM_LIFETIME; after that time, old
   sequence number information is considered no longer valuable and the
   Expired route MUST BE expunged.

   MAX_SEQNUM_LIFETIME is the time after a reboot during which an AODVv2
   router MUST NOT transmit any routing messages.  Thus, if all other
   AODVv2 routers expunge routes to the rebooted router after that time
   interval, the rebooted AODVv2 router's sequence number will not be
   considered stale by any other AODVv2 router in the MANET.

   When the link to a route's next hop is broken, the route is marked as
   being Broken, and the route may no longer be used.

5.3.  Router Clients and Client Networks [DONE]

   An AODVv2 router may offer routing services to other nodes that are
   not AODVv2 routers.  AODVv2 defines the Sequence Number to be the
   same for the AODVv2 router and each of its clients.

   For this purpose, CLIENT_ADDRESSES must be configured on each AODVv2
   router with the following information:

   Client IP address
      The IP address of the node that requires routing service from the
      AODVv2 router.
   Client Prefix Length
      The length of the routing prefix associated with the client IP
      address.

   The list of Routing Clients for an AODVv2 router is never empty, 
   since an AODVv2 router is always its own client as well.

5.5.  Sequence Numbers [DONE]

   Each AODVv2 router in the network MUST maintain its own sequence
   number.  An AODVv2 router increments its SeqNum as follows.  Most of
   the time, SeqNum is incremented by simply adding one (1).  But to
   increment SeqNum when it has the value of the largest possible number
   representable as a 16-bit unsigned integer (i.e., 65,535), it MUST be
   set to one (1).  In other words, the sequence number after 65,535 is
   1.

6.1.  Evaluating Incoming Routing Information [DONE]

   Whenever an AODVv2 router (HandlingRtr)
   handles an incoming RteMsg (i.e., RREQ or RREP), for every relevant
   address (RteMsg.Addr) in the RteMsg, HandlingRtr searches its route
   table to see if there is a route table entry with the same MetricType
   of the RteMsg, matching RteMsg.Addr.  If not, HandlingRtr creates a
   route table entry for RteMsg.Addr as described in Section 6.2.
   Otherwise, HandlingRtr compares the incoming routing information in
   RteMsg against the already stored routing information in the route
   table entry (Route) for RteMsg.Addr, as described below.

   1.  Stale::  RteMsg.SeqNum < Route.SeqNum :
      If RteMsg.SeqNum < Route.SeqNum the incoming information is stale.
      Using stale routing information is not allowed, since that might
      result in routing loops.  HandlingRtr MUST NOT update the route
      table entry using the routing information for RteMsg.Addr. [DONE]
   3.  More costly::
      (RteMsg.Cost >= Route.Metric) && (Route.Broken==FALSE)
      When RteMsg.SeqNum is the same as in a valid route table entry,
      and LoopFree (RteMsg, Route) assures loop freedom, incoming
      information still does not offer any improvement over the existing
      route table information if RteMsg.Cost >= Route.Metric.  Using
      such incoming routing information to update a route table entry is
      not recommended. [DONE]
   4.  Offers improvement::
      Incoming routing information that does not match any of the above
      criteria is better than existing routing table information and
      SHOULD be used to improve the route table.  The following pseudo-
      code illustrates whether incoming routing information should be
      used to update an existing route table entry as described in
      Section 6.2. [DONE]

5.7.  RREQ Table: Received RREQ Messages

   Two incoming RREQ messages are considered to be "comparable" if they
   were generated by the same AODVv2 router in order to discover a route
   for the same destination with the same metric type. 
   A router, after receiving a RREQ message, MUST check against previous RREQs 
   to assure that its response message would contain information that is not 
   redundant.

   To avoid transmission of redundant RREQ messages, while still
   enabling the proper handling of earlier RREQ messages that may have
   somehow been delayed in the network, it is needed for each AODVv2
   router to keep a list of the certain information about RREQ messages
   which it has recently received.

   This list is called the RREQ Table.  Two AODVv2 RREQ messages are comparable if:

   o  they have the same metric type
   o  they have the same OrigNode and TargNode addresses

   Each entry in the RREQ Table has the following fields:

   o  Metric Type
   o  OrigNode address
   o  TargNode address
   o  Sequence Number
   o  Metric
   o  Timestamp

   The RREQ Table is maintained so that no two entries in the RREQ Table
   are comparable -- that is, all RREQs represented in the RREQ Table
   either have different OrigNode addresses, different TargNode
   addresses, or different metric types.  If two RREQs have the same
   metric type and OrigNode and Targnode addresses, the information from
   the one with the older Sequence Number is not needed in the table; in
   case they have the same Sequence Number, the one with the greater
   Metric value is not needed; in case they have the same Metric as
   well, it does not matter which table entry is maintained.  Whenever a
   RREQ Table entry is updated, its Timestamp field should also be
   updated to reflect the Current_Time.


6.2.  Applying Route Updates To Route Table Entries [DONE]
   
   To apply the route update, the route table entry is populated with
   the following information:

   o  Route.Address := RteMsg.Addr 
   o  If RteMsg.PrefixLength exists, then Route.PrefixLength :=
      RteMsg.PrefixLength.  Otherwise, Route.PrefixLength := maximum
      length for address family (either 32 or 128).
   o  Route.SeqNum := RteMsg.SeqNum
   o  Route.NextHopAddress := IP.SourceAddress (i.e., an address of the
      node from which the RteMsg was received)
   o  Route.Broken flag := FALSE
   o  Route.Metric := (RteMsg.Metric + Cost(L)), where L is the incoming
      link.
   o  Route.ExpirationTime := Current_Time + (ACTIVE_INTERVAL + MAX_IDLETIME). [DONE]

6.3.  Route Table Entry Timeouts [DONE]
   
   During normal operation, AODVv2 does not require any explicit
   timeouts to manage the lifetime of a route.  However, the route table
   entry MUST be examined before using it to forward a packet, as
   discussed in Section 8.1.  Any required expiry or deletion can occur
   at that time.  Nevertheless, it is permissible to implement timers
   and timeouts to achieve the same effect.

   At any time, the route table can be examined and route table entries
   can be expunged according to their current state at the time of
   examination, as follows.

   o  An Active route MUST NOT be expunged.
   o  An Idle route SHOULD NOT be expunged.
   o  An Expired route MAY be expunged (least recently used first).
   o  A route MUST be expunged if (Current_Time - Route.LastUsed) >=
      MAX_SEQNUM_LIFETIME.
   o  A route MUST be expunged if Current_Time >= Route.ExpirationTime

7.2.  RteMsg Structure [DONE]
   
   RteMsgs have the following general format:

   +---------------------------------------------------------------+
   |       RFC 5444 Message Header (optionally, with MsgTLVs)      |
   +---------------------------------------------------------------+
   |                AddrBlk := {OrigNode,TargNode}                 |
   +---------------------------------------------------------------+
   |              OrigSeqNumTLV AND/OR TargSeqNumTLV               |
   +---------------------------------------------------------------+
   |                 Added Node Address SeqNumTLV                  |
   +---------------------------------------------------------------+

         Figure 1: RREQ and RREP (RteMsg) message structure

   Required Message Header Fields
      The RteMsg MUST contain the following:
      *  <msg-hop-limit>
   
   AddrBlk
      This Address Block contains the IP addresses for RREQ Originating
      and Target Node (OrigNode and TargNode).  For both RREP and RREQ,
      OrigNode and TargNode are as identified in the context of the RREQ
      message originator.
   OrigSeqNum AND/OR TargSeqNum AddrTLV
      At least one of OrigSeqNum or TargSeqNum Address Block TLV is
      REQUIRED and carries the destination sequence numbers associated
      with either OrigNode or TargNode.  Both may appear when SeqNum
      information is available for both OrigNode and TargNode.


   RteMsgs carry information about OrigNode and TargNode.  Since their
   addresses may appear in arbitrary order within the RFC 5444 AddrBlk,
   the OrigSeqNum and/or TargSeqNum TLVs must be used to distinguish the
   nature of the node addresses present in the AddrBlk.  In each RteMsg,
   at least one of OrigSeqNumTLV or TargSeqNumTLV MUST appear.  Both
   TLVs MAY appear in the same RteMsg, but each one MUST NOT appear more
   than once, because there is only one OrigNode and only one TargNode
   address in the AddrBlk.

7.3.  RREQ Generation [DONE]

   The AODVv2 router generating the RREQ (RREQ_Gen) on behalf of its
   client OrigNode follows the steps in this section. OrigNode MUST be
   a unicast address.

   1. RREQ_Gen MUST increment its SeqNum by one (1) according to the
      rules specified in Section 5.5.  This assures that each node
      receiving the RREQ will update its route table using the
      information in the RREQ.

   An example RREQ message format is illustrated in Appendix A.1.

7.4.  RREP Generation [DONE]

   Before transmitting a RREP, the routing information of the RREQ is
   processed as specified in Section 6.2; after such processing,
   RREP_Gen has an updated route to OrigNode as well as TargNode.  The
   basic format of an RREP conforms to the structure for RteMsgs as
   shown in Figure 1.

   RREP_Gen generates the RREP as follows:

   2.   RREP_Gen MUST increment its SeqNum by one (1) according to the
        rules specified in Section 5.5.
   3.   RREP.AddrBlk := {OrigNode.Addr, TargNode.Addr}

        Let OrigNodeNdx and TargNodeNdx denote the indexes of OrigNode
        and TargNode respectively in the RREQ.AddrBlk list.
   4.   RREP.OrigSeqNumTLV[OrigNodeNdx]  := Route[OrigNode].Seqnum
   5.   RREP.TargSeqNumTLV[TargNodeNdx]  := RREP_Gen's SeqNum
   11.  IP.DestinationAddr := Route[OrigNode].NextHop

   An example message format for RREP is illustrated in Appendix A.2.

7.5.  Handling a Received RteMsg [DONE]

   Before an AODVv2 router can make use of a received RteMsg (i.e., RREQ
   or RREP), the router first must verify that the RteMsg is permissible
   according to the following steps. OrigNodeNdx and TargNodeNdx are
   set according to the rules in Section 7.2.  For RREQ, RteMsg.Metric
   is MetricTLV[OrigNodeNdx].  For RREP, RteMsg.Metric is
   MetricTLV[TargNodeNdx]. In this section (unless qualified by
   additional description such as "upstream" or "neighboring") all
   occurrences of the term "router" refer to the AODVv2 router handling
   the received RteMsg. 

   2. The router examines the RteMsg to ascertain that it contains the
      required information: <msg-hop-limit>, TargNode.Addr,
      OrigNode.Addr, RteMsg.Metric, and either RteMsg.OrigSeqNum or
      RteMsg.TargSeqNum.  If the required information does not exist,
      the message is disregarded.
   
   An AODVv2 router handles a permissible RteMsg according to the
   following steps.
   
   1.  The router MUST process the routing information for OrigNode and
       TargNode contained in the RteMsg as specified in Section 6.1.

   3. If RteMsg.<msg-hop-limit> is zero (0), no further action is
      taken, and the RteMsg is not retransmitted.  Otherwise, the
      router MUST decrement RteMsg.<msg-hop-limit>.

   4.  The router checks the Metric Type MsgTLV (if present) to assure
       that the Metric Type associated with the Metric AddrTLV
       information in the RREQ or RREP is known, and that Cost(L) can be
       computed, where 'L' is the incoming link.  If not, the message is
       disregarded.

   5.  If (MAX_METRIC[RteMsg.MetricType] - Cost(L)) <= RteMsg.Metric,
       the RteMsg is disregarded, where Cost(L) denotes the cost of
       traversing the incoming link (i.e., as measured by the network
       interface receiving the incoming RteMsg).

7.5.1.  Additional Handling for Incoming RREQ [DONE]

   o  The incoming RREQ MUST be checked against previously received
      information from the RREQ Table Section 7.6.  If the information
      in the incoming RteMsg is redundant, then then no further action
      is taken.
   o  If TargNode is a client of the router receiving the RREQ, then the
      router generates a RREP message as specified in Section 7.4, and
      subsequently processing for the RREQ is complete.  Otherwise,
      processing continues as follows.
   o  RREQ.MetricType := Route[OrigNode].MetricType
   o  RREQ.MetricTLV[OrigNodeNdx] := Route[OrigNode].Metric
   o  The RREQ (with updated fields as specified above>) SHOULD be sent
      to the IP multicast address LL-MANET-Routers [RFC5498].  If the
      RREQ is unicast, the IP.DestinationAddress is set to
      Route[RREQ.TargNode].NextHopAddress. 
      [Note: Done, but not using LL-MANET-Routers yet]

7.5.2.  Additional Handling for Incoming RREP [DONE]

   o  If no forwarding route exists to OrigNode, then a RERR SHOULD be
      transmitted to RREP.AddrBlk[TargNodeNdx]. Otherwise, if
      HandlingRtr is not RREQ_Gen then the outgoing RREP is sent to the
      Route.NextHopAddress for the RREP.AddrBlk[OrigNodeNdx].   
   o  If HandlingRtr is RREQ_Gen then the RREP satisfies RREQ_Gen's
      earlier RREQ, and RREP processing is completed. 

7.6.  Suppressing Redundant RREQ messages [DONE]

   TODO: shouldn't this be somewhere near 5.7.  RREQ Table: Received RREQ Messages?

   Since RREQ messages are multicast, there are common circumstances in
   which an AODVv2 router might transmit a redundant response (RREQ or
   RREP), duplicating the information transmitted in response to some
   other recent RREQ (see Section 5.7).  Before responding, an AODVv2
   router MUST suppress such redundant RREQ messages.  This is done by
   checking the list of recently received RREQs to determine whether the
   incoming RREQ contains new information, as follows:

   o  The AODVv2 router searches the RREQ Table for recent entries with
      the same OrigNode, TargNode, and Metric Type.  If there is no such
      entry, the incoming RREQ message is not suppressed.  A new entry
      for the incoming RREQ is created in the RREQ Table.
   o  If there is such an entry, and the incoming RREQ has a newer
      sequence number, the incoming RREQ is not suppressed, and the
      existing table entry MUST be updated to reflect the new Sequence
      Number and Metric.
   o  Similarly, if the Sequence Numbers are the same, and the incoming
      RREQ offers a better Metric, the incoming RREQ is not suppressed,
      and the RREQ Table entry MUST be updated to reflect the new
      Metric.
   o  Otherwise, the incoming RREQ is suppressed.

8.  Route Maintenance and RERR Messages [DONE]

   AODVv2 routers attempt to maintain active routes.  When a routing
   problem is encountered, an AODVv2 router (denoted RERR_Gen) attempts
   to quickly notify upstream routers.  Two kinds of routing problems
   may trigger generation of a RERR message.  The first case happens
   when the router receives a packet but does not have a route for the
   destination of the packet.  The second case happens immediately upon
   detection of a broken link (see Section 8.2) of an Active route, to
   quickly notify upstream AODVv2 routers that that route is no longer
   available.

8.1.  Maintaining Route Lifetimes During Packet Forwarding [DONE]

   Before using a route to forward a packet, an AODVv2 router MUST check
   the status of the route as follows.

      If the route is marked has been marked as Broken, it cannot be
      used for forwarding.
      If Current_Time > Route.ExpirationTime, the route table entry has
      expired, and cannot be used for forwarding.
      Similarly, if (Route.ExpirationTime == MAXTIME), and if
      (Current_Time - Route.LastUsed) > (ACTIVE_INTERVAL +
      MAX_IDLETIME), the route has expired, and cannot be used for
      forwarding.
      Furthermore, if Current_Time - Route.LastUsed >
      (MAX_SEQNUM_LIFETIME), the route table entry MUST be expunged.

   If any of the above route error conditions hold true, the route
   cannot be used to forward the packet, and an RERR message MUST be
   generated (see Section 8.3).

   Otherwise, Route.LastUsed := Current_Time, and the packet is
   forwarded to the route's next hop.

8.2.  Active Next-hop Router Adjacency Monitoring

   AODVv2 routers SHOULD monitor connectivity to adjacent routers along
   active routes.  This monitoring can be accomplished by one or several
   mechanisms, including:

   o  Other monitoring mechanisms or heuristics

   If a next-hop AODVv2 router has become unreachable, RERR_Gen follows
   the procedures specified in Section 8.3.2.

8.3.  RERR Generation [DONE]

   An RERR message is generated by a AODVv2 router (i.e., RERR_Gen) in
   order to notify upstream routers that packets cannot be delivered to
   certain destinations.  An RERR message has the following general
   structure:

    +---------------------------------------------------------------+
    |     RFC 5444 Message Header <msg-hoplimit> <msg-hopcount>     |
    +---------------------------------------------------------------+
    |      UnreachableNode AddrBlk (Unreachable Node addresses)     |
    +---------------------------------------------------------------+
    |             UnreachableNode SeqNum AddrBlk TLV                |
    +---------------------------------------------------------------+

                     Figure 2: RERR message structure

   Required Message Header Fields
      The RERR MUST contain the following:

      *  <msg-hop-limit>
      *  PktSource Message TLV (see Section 15), if the RERR is unicast
      *  Metric Type Message TLV (see Section 15), if MetricType != 3

   UnreachableNode AddrBlk
      This Address Block contains the IP addresses unreachable by AODVv2
      router transmitting the RERR.
   Sequence Number AddrBlk TLV
      This Address Block TLV carries the destination sequence number
      associated with each UnreachableNode when that information is
      available.
   UnreachableNode.PrefixLength
      The prefix length associated with an UnreachableNode.

   There are two kinds of events indicating that packets cannot be
   delivered to certain destinations.  The two cases differ in the way
   that the neighboring IP destination address for the RERR is chosen,
   and in the way that the set of UnreachableNodes is identified.

   In both cases, the <msg-hop-limit> MUST be included and SHOULD be set
   to MAX_HOPCOUNT.  <msg-hop-count> SHOULD be included and set to 0.

8.3.1.  Case 1: Undeliverable Packet [DONE]

   The first case happens when the router receives a packet from another
   AODVv2 router but does not have a valid route for the destination of
   the packet.  In this case, there is exactly one UnreachableNode to be
   included in the RERR's AddrBlk (either IP.DestinationAddress from a
   data packet or RREP.AddrBlk[OrigNode]).  The RERR SHOULD be sent to
   the multicast address LL-MANET-Routers, but RERR_Gen MAY instead send
   the RERR to the next hop towards the source IP address of the packet
   which was undeliverable. If a Sequence Number for UnreachableNode is 
   known, that Sequence Number SHOULD be included in a Seqnum AddrTLV the RERR.  
   Otherwise all nodes handling the RERR will assume their route through 
   RERR_Gen towards the UnreachableNode is no longer valid and flag those routes 
   as broken, regardless of the Sequence Number information for those
   routes.  RERR_Gen MUST discard the packet or message that triggered
   generation of the RERR.

8.3.2.  Case 2: Broken Link

   The second case happens when the link breaks to an active adjacent
   AODVv2 router (i.e., the next hop of an active route).  In this case,
   the RERR MUST be sent to the multicast address LL-MANET-Routers.
   All routes (Active, Idle and Expired) that use the broken link MUST 
   be marked as Broken. For each such Active Route, Route.Dest is
   added to the set of Unreachable Nodes.

   If the set of UnreachableNodes is empty, no RERR is generated.
   Otherwise, RERR_Gen generates a new RERR, and the address of each
   UnreachableNode is inserted into an AddrBlock.  The value for each
   UnreachableNode's SeqNum (UnreachableNode.SeqNum) MUST be placed in
   the SeqNum AddrTLV.

8.4.  Receiving and Handling RERR Messages

   When an AODVv2 router (HandlingRtr) receives a RERR message, it uses
   the information provided to invalidate affected routes.  If the
   information in the RERR may be relevant to upstream neighbors using
   those routes, HandlingRtr subsequently sends another RERR to those
   neighbors.  This operation has the effect of retransmitting the RERR
   information and is counted as another "hop" for purposes of properly
   modifying <msg-hop-limit> and <msg-hop-count> in the RERR message
   header.

   HandlingRtr examines the incoming RERR to assure that it contains
   <msg-hop-limit> and at least one UnreachableNode.Address.  If the
   required information does not exist, the incoming RERR message is
   disregarded and further processing stopped.  Otherwise, for each
   UnreachableNode.Address, HandlingRtr searches its route table for a
   route using longest prefix matching.  If no such Route is found,
   processing is complete for that UnreachableNode.Address.  Otherwise,
   HandlingRtr verifies the following:

   2.  Route.NextHopAddress is the same as RERR IP.SourceAddress.

   If the Route satisfies all of the above conditions, HandlingRtr
   sets the Route.Broken flag for that Route. Furthermore, if <msg-hop-
   limit> is greater than 0, then HandlingRtr adds the UnreachableNode
   address and TLV information to an AddrBlk for delivery in the
   outgoing RERR message.

   If there are no UnreachableNode addresses to be transmitted in an
   RERR to upstream routers, HandlingRtr MUST discard the RERR, and no
   further action is taken.

   Otherwise, <msg-hop-limit> is decremented by one (1) and processing
   continues as follows:

   o  Otherwise, if the PktSource Message TLV is present, and
      HandlingRtr has a Route to PktSource.Addr, then HandlingRtr MUST
      send the outgoing RERR to Route[PktSource.Addr].NextHop.
   o  Otherwise, the outgoing RERR MUST be sent to LL-MANET-Routers.




