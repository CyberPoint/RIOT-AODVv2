
import argparse
import traceback
import sys
import os
import xml.etree.ElementTree as ET

'''
TODO: kann ich auf fields auch iwie ueber den name anstatt index zugreifen?
'''

working_dir = "./dumps/"
xml_file_str = ""
packets = [] # store ALL the packets!

RFC5444_MSGTYPE_RREQ = "10"
RFC5444_MSGTYPE_RREP = "11"
RFC5444_MSGTYPE_RERR = "12"

RFC5444_MSGTLV_ORIGSEQNUM = "0"
RFC5444_MSGTLV_TARGSEQNUM = "1"
RFC5444_MSGTLV_UNREACHABLE_NODE_SEQNUM = "2"
RFC5444_MSGTLV_METRIC = "3"

'''
take xml.etree.ElementTree.Element, turn it into a dict and store it in packets[]
'''
def store_pkt(packetbb, ):
    pkt = {}
    orignode = {}
    targnode = {}

    header = packetbb[0]
    addrblock = packetbb[2]
    tlvblock = addrblock[5] #problem: bei !=2 adressen (RERRs!!) funktioniert das nicht mehr so.. =Â° rausfinden wie zum fick ich findall richtig benutze

    msg_type = header[0].attrib.get("show")
    hop_limit = header[-1].attrib.get("show")

    pkt["msg_type"] = msg_type
    pkt["hop_limit"] = hop_limit


    if((msg_type == RFC5444_MSGTYPE_RREQ) or (msg_type == RFC5444_MSGTYPE_RREP)):
        orignode["addr"] = addrblock[3].get("show")
        targnode["addr"] = addrblock[4].get("show")        

        for tlv in tlvblock:
            if (tlv.get("name") == "packetbb.tlv"):
                tlv_indexstart = tlv[3].get("show")
                tlv_type = tlv[0].get("show")
                tlv_value = tlv[-1].get("value")

                if (tlv_indexstart == "0"):
                    node = orignode
                elif (tlv_indexstart == "1"):
                    ndoe = targnode

                if ((tlv_type == RFC5444_MSGTLV_ORIGSEQNUM) or (tlv_type == RFC5444_MSGTLV_TARGSEQNUM)):
                    node["seqnum"] = tlv_value

                elif (tlv_type == RFC5444_MSGTLV_METRIC):
                    node["metric"] = tlv_value

        pkt["orignode"] = orignode
        pkt["targnode"] = targnode

    elif(msg_type == RFC5444_MSGTYPE_RERR):
        unreachable_nodes = []

        # TODO

        pkt["unreachable_nodes"] = unreachable_nodes

    
    foo = packetbb.findall("tlvblock")
    print "foo:", foo
    for f in foo:
        print f.attrib


    print "\t", pkt
    packets.append(pkt)

def pcap_to_xml(pcap_file_str):
    global working_dir, xml_file_str

    # make sure we have a directory to operate in
    if (not os.path.exists(working_dir)):
        os.makedirs(working_dir)

    xml_file_str = working_dir + pcap_file_str.split("/")[-1].split(".")[0] + ".xml"
    
    # make pcap python-readable by converting it to xml, store in file
    if (os.path.isfile(xml_file_str)):
        os.remove(xml_file_str)
    os.system("tshark -r %s -V -Y packetbb -T pdml >> %s" %(pcap_file_str, xml_file_str))

def handle_capture():
    tree = ET.parse(xml_file_str)
    root = tree.getroot()
    for packet in root:
        print packet.tag

        packetbb = packet[-1][-1]
        store_pkt(packetbb)

def main():
    pcap_file_str = ""
    
    parser = argparse.ArgumentParser(description='evaluate traffic generated by auto_test')
    parser.add_argument('-f','--file', type=str, help='pcap file to evaluate')

    args = parser.parse_args()
    pcap_file_str = args.file

    pcap_to_xml(pcap_file_str)
    handle_capture()

    print packets

if __name__ == "__main__":
    main()